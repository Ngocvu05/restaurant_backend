package com.management.chat_service.controller;

import com.management.chat_service.dto.ChatRoomDTO;
import com.management.chat_service.mapper.IChatRoomMapper;
import com.management.chat_service.model.ChatRoom;
import com.management.chat_service.service.IChatRoomService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/v1/rooms")
public class ChatRoomController {
    private final IChatRoomService chatRoomService;
    private final IChatRoomMapper chatRoomMapper;

    @GetMapping("/{userId}")
    public ResponseEntity<Map<String, Object>> getChatRooms(@PathVariable Long userId) {
        log.info("üì• Get chat rooms for userId = {}", userId);
        Map<String, Object> response = new HashMap<>();
        response.put("rooms", chatRoomService.getAllRooms(userId));
        return ResponseEntity.ok(response);
    }

    /**
     * T·∫°o ho·∫∑c l·∫•y m·ªôt ph√≤ng chat ri√™ng t∆∞ gi·ªØa ng∆∞·ªùi d√πng hi·ªán t·∫°i v√† m·ªôt ng∆∞·ªùi d√πng kh√°c.
     * @param targetUserId ID c·ªßa ng∆∞·ªùi d√πng mu·ªën chat c√πng.
     * @param currentUserId ID c·ªßa ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p (l·∫•y t·ª´ header ho·∫∑c security context).
     * @return ChatRoomDTO c·ªßa ph√≤ng chat.
     */
    @PostMapping("/private")
    public ResponseEntity<ChatRoomDTO> getOrCreatePrivateRoom(
            @RequestParam Long targetUserId,
            @RequestHeader("X-User-Id") Long currentUserId) {

        ChatRoom room = chatRoomService.getOrCreatePrivateRoom(currentUserId, targetUserId);
        return ResponseEntity.ok(chatRoomMapper.toDTO(room));
    }
}
